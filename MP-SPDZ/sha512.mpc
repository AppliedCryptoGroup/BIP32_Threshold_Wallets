import sys
from io import StringIO
from Compiler.GC.types import sbits, sbitintvec
from circuit import Circuit
# from Compiler import library

# sha256: 2 512 256
# sha512: 2 1024 512

siv256 = sbitintvec.get_type(256)
siv512 = sbitintvec.get_type(512)
siv1024 = sbitintvec.get_type(1024)
sb512 = sbits.get_type(512)
sb1024 = sbits.get_type(1024)
# 128 aa bytes (1024 bits)
key = siv256(0x6f4f1298fe8bdcf149dc8f73d1fcebde4c225b8586769eaf07effcb11f9ac1f4)
# Ch =  siv256(0x382f34d4939dc740683bf61c85797d221c6538d767fcec1679bb9aa624990e00)
# id = siv256(0x10000011)
# hardcoded key+ch+id+paddings of 0 (for simplicity)
msg = siv1024(sb1024(0x6f4f1298fe8bdcf149dc8f73d1fcebde4c225b8586769eaf07effcb11f9ac1f4382f34d4939dc740683bf61c85797d221c6538d767fcec1679bb9aa624990e0010000011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000))
# msg = siv1024(sb1024(0x1 << 1023))
sha512 = Circuit('sha512')
iv = siv512(0x6a09e667f3bcc908bb67ae8584caa73b3c6ef372fe94f82ba54ff53a5f1d36f1510e527fade682d19b05688c2b3e6c1f1f83d9abfb41bd6b5be0cd19137e2179)
digest = sha512(msg, iv)
chunk = siv1024(sb1024((1 << 1023) + 1024))
digest = sha512(chunk, digest)
# digest.elements()[0].reveal().print_reg()
digest = siv256(digest) + key
# print_ln("%s", digest.elements()[0].reveal())
digest.elements()[0].reveal().print_reg()