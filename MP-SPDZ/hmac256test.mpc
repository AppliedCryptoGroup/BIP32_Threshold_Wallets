from Compiler.GC.types import sbits, sbitintvec
from circuit import Circuit

siv256 = sbitintvec.get_type(256)
siv512 = sbitintvec.get_type(512)
sb512 = sbits.get_type(512)

# Define HMAC key
key = siv256(0x263636368a513636363636363636363636363636363636363636363636363636)  # Your secret HMAC key here

# Compute inner and outer paddings
ipad = key ^ siv256(0x3636363636363636363636363636363636363636363636363636363636363636)
opad = key ^ siv256(0x5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c)

# Initialize SHA-256 circuit
sha256 = Circuit('sha256')

# Initialize message and digest
msg = siv512(sb512(0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa))
# msg = siv256(0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa)
init = siv512((siv512(ipad) << 256 )+ msg)
iv = siv256(0x6a09e667bb67ae853c6ef372a54ff53a510e527f9b05688c1f83d9ab5be0cd19)
# digest = sha256(msg, iv)
digest = sha256(init, iv)

# Append padding chunk for SHA-256
chunk = siv512(sb512((1 << 511) + 512))
digest = sha256(chunk, digest)

# Compute HMAC-SHA256
# inner_input = siv512(ipad + digest)
# h_inner = sha256(inner_input, iv)

# outer_input = siv512(opad + h_inner)
outer_input = siv512((siv512(opad) << 256 ) + digest)
h_outer = sha256(outer_input, iv)

# Append padding chunk for SHA-256
chunk2 = siv512(sb512((1 << 511) + 512))
digest2 = sha256(chunk2, h_outer)

# Reveal and print the result
result = digest2.elements()[0].reveal()
result.print_reg()
